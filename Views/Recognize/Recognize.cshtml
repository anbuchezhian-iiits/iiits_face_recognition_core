@{
    Layout = "_Layout";
    ViewData["Title"] = "Recognize";
}

<div class="container py-5">
    <h2 class="text-center mb-4">Face Recognition</h2>

    <div class="row justify-content-center">
        <div class="col-md-8">
            <!-- Camera Capture Section -->
            <div class="card mb-4" id="takePhotoCard">
                <div class="card-header text-center">
                    <h5>Take a Photo</h5>
                </div>
                <div class="card-body text-center">
                    <video id="camera" class="rounded mb-3" autoplay playsinline style="width: 100%; max-width: 400px; height: auto;"></video>
                    <canvas id="snapshot" class="d-none" style="display: none;"></canvas>

                    <div>
                        <button class="btn btn-primary mt-3" id="captureBtn">
                            <span class="material-icons">photo_camera</span>
                        </button>
                    </div>
                </div>
            </div>

            <!-- Captured Image & Predicted Result -->
            <div id="resultSection" class="card d-none">
                <div class="card-header text-center">
                    <h5>Prediction Result</h5>
                </div>
                <div class="card-body text-center">
                    <img id="capturedImage" src="#" alt="Captured Image" class="rounded mb-3" style="width: 100%; max-width: 400px; height: auto;">

                    <!-- Bootstrap Alert for Result -->
                    <div id="resultAlert" class="alert alert-info d-none" role="alert">
                        <span id="predictedResult"></span>
                    </div>

                    <!-- Reset Button -->
                    <button class="btn btn-secondary mt-3" id="resetBtn">
                        <span class="material-icons">refresh</span>
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    // Accessing the Camera
    const video = document.getElementById('camera');
    const canvas = document.getElementById('snapshot');
    const captureBtn = document.getElementById('captureBtn');
    const capturedImage = document.getElementById('capturedImage');
    const resultSection = document.getElementById('resultSection');
    const takePhotoCard = document.getElementById('takePhotoCard');
    const predictedResult = document.getElementById('predictedResult');
    const resultAlert = document.getElementById('resultAlert');
    const resetBtn = document.getElementById('resetBtn');

    // Request camera access
    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
        navigator.mediaDevices.getUserMedia({ video: true })
            .then(stream => {
                video.srcObject = stream;
                video.play();
            })
            .catch(error => {
                console.error("Error accessing the camera:", error);
            });
    } else {
        alert("Your browser does not support camera access.");
    }

    // Capture photo from video
    captureBtn.addEventListener("click", async function () {
        canvas.width = video.videoWidth;
        canvas.height = video.videoHeight;
        canvas.getContext('2d').drawImage(video, 0, 0, canvas.width, canvas.height);

        // Display captured image and hide the Take a Photo card
        capturedImage.src = canvas.toDataURL('image/png');
        takePhotoCard.classList.add("d-none");
        resultSection.classList.remove("d-none");

        // Create a FormData object to send the image as multipart form data
        const formData = new FormData();
        const dataUrl = capturedImage.src;
        const blob = dataURLtoBlob(dataUrl);
        formData.append("capturedPhoto", blob, "captured_image.png");

        // Send the captured image to the CaptureAndRecognize action in the controller
        try {
            const response = await fetch('@Url.Action("CaptureAndRecognize", "RecognizePerson")', {
                method: 'POST',
                body: formData
            });

            const result = await response.json();
            if (response.ok) {
                console.log("Recognition successful: ", result);
                predictedResult.textContent = `Predicted Person: ${result.recognizedPersonName || 'Unknown'}, Similarity: ${result.similarity || 'N/A'}%`;
                resultAlert.classList.remove("d-none"); // Show the alert
            } else {
                predictedResult.textContent = "Recognition failed.";
                resultAlert.classList.remove("d-none");
                console.error("Error:", result.message);
            }
        } catch (error) {
            predictedResult.textContent = "An error occurred while processing the image.";
            resultAlert.classList.remove("d-none");
            console.error("Error:", error);
        }
    });

    // Function to convert base64 to Blob
    function dataURLtoBlob(dataURL) {
        const byteString = atob(dataURL.split(',')[1]);
        const mimeString = dataURL.split(',')[0].split(':')[1].split(';')[0];
        const arrayBuffer = new ArrayBuffer(byteString.length);
        const uintArray = new Uint8Array(arrayBuffer);
        for (let i = 0; i < byteString.length; i++) {
            uintArray[i] = byteString.charCodeAt(i);
        }
        return new Blob([uintArray], { type: mimeString });
    }

    // Reset button to start new prediction
    resetBtn.addEventListener("click", function () {
        // Clear the captured image and result
        capturedImage.src = "";
        predictedResult.textContent = "";
        resultAlert.classList.add("d-none"); // Hide the alert

        // Show Take a Photo card again, hide the result section
        takePhotoCard.classList.remove("d-none");
        resultSection.classList.add("d-none");
    });
</script>

<!-- Optional: Add Bootstrap and other necessary files -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-5o1k04Kz3pTImY6g5c2W/f6BzKhQ4qdF02IkBQ21h4zjBYDbI/a0HGXZG2FxzPi5"></script>
